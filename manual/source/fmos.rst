Functional Mock-Up Objects
==========================
.. highlight:: EBNF


*General Introduction to FMUs, FMOs, and the modeldescription*

Syntax
------

*Types and simulate statement*

Types
^^^^^

The type of an FMO contains the list of all its inputs and all its outputs. 
Syntactically, an *FMO-type* has the following form.
*Cont[..]*
::

  TYPE ::= ... | Cont [ (in TYPE NAME)* ; (out TYPE NAME)* ] ;

Each input of the underlying FMO that is to be written must be declared via ``in TYPE NAME`` within the first list of type, 
and every output that is to be read must be declared via ``out TYPE NAME``.

The type of an input or output is the SMOL equivalent according to the following table:

==== =======
FMI  SMOL
==== =======
     Double
     Boolean
     String
     Integer
==== =======

The type for FMUs without any inputs and outputs is ``Cont[;]``.

Subtyping
"""""""""

*subtypes have less field and the fields must be subtypes (covariant)*

Statement
^^^^^^^^^

*simulate*


Example
"""""""

*Load example*

Semantics
---------

*Methods and Field autogenerated, references to FMI*

*fields from FMU*

*offset*

*role*

*tick*

Example
^^^^^^^

*load, read, write, tick*

Semantical Lifting
------------------

*idea and motivation*

Ontology
^^^^^^^^

Example
^^^^^^^
