class Pair<A, B>(A key, B value) end

class Node<S>(Pair<Int, S> dataL,
                  Pair<Int, S> dataR,
                  Node<S> childL,
                  Node<S> childM,
                  Node<S> childR,
                  Node<S> parent)
    Node<S> add(Pair<Int, S> kv)
        Node<S> res = null;
        if(this.childL == null) then //this is a leaf
            if(this.dataL == null)  then this.dataL = kv;
            else
                if (this.dataR == null) then
                     if (this.dataL.key <= kv.key) then this.dataR = kv;
                     else
                        this.dataR = this.dataL;
                        this.dataL = kv;
                     end
                else
                    res = this.createNew(kv);
                end
            end
        else                    //this is an internal node
            if(kv.key <= this.dataL.key) then res = this.childL.add(kv);
            else
                if(this.dataR == null) then res = this.childM.add(kv); //this is a 2-node
                else                                        //this is a 3-node
                    if(kv.key <= this.dataR.key) then res = this.childM.add(kv);
                    else res = this.childR.add(kv);
                    end
                end
             end
        end
        return res;
    end


    Node<S> createNew(Pair<Int, S>kv)
        //find middle
        Pair<Int, S> middle = null;
        Node<S> left = null;
        Node<S> right = null;
        if(kv.key <= this.dataL.key) then
            middle = this.dataL;
            left = new Node<S>(kv, null, null, null, null, null);
            right = new Node<S>(this.dataR, null, null, null, null, null);
        else
            if (kv.key >= this.dataR.key) then
                middle = this.dataR;
                left = new Node<S>(this.dataL, null, null, null, null, null);
                right = new Node<S>(kv, null, null, null, null, null);
            else
                middle = kv;
                left = new Node<S>(this.dataL, null, null, null, null, null);
                right = new Node<S>(this.dataR, null, null, null, null, null);
            end
         end
        Node<S> newTop = this.repairOrReroot(middle, left, right);
        return newTop;
    end

    Node<S> repair(Node<S> left, Pair<Int, S> middle, Node<S> right, Node<S> from)
        Node<S> res = null;
        if(this.dataR == null) then  //internal 2-node
            if(from == this.childL) then
                this.dataR = this.dataL;
                this.dataL = middle;
                this.childR = this.childM;
                this.childM = right;
                this.childL = left;
                right.parent = this;
                left.parent = this;
            else
                this.dataR = middle;
                this.childR = right;
                this.childM = left;
                right.parent = this;
                left.parent = this;
            end
            return this;
        else                        //internal 3-node
            Node<S> newLeft = null;
            Node<S> newRight = null;
            if(from == this.childL) then
                 newLeft = new Node<S>(middle, null, left, right, null, null);
                 left.parent = newLeft;
                 right.parent = newLeft;
                 newRight = new Node<S>(this.dataR, null, this.childM, this.childR, null, null);
                 this.childM.parent = newRight;
                 this.childR.parent = newRight;
            else
                if(from == this.childM) then
                     newLeft = new Node<S>(this.dataL, null, this.childL, left, null, null);
                     this.childL.parent = newLeft;
                     left.parent = newLeft;
                     newRight = new Node<S>(this.dataR, null, right, this.childR, null, null);
                     right.parent = newRight;
                     this.childR.parent = newRight;
                else
                     newLeft = new Node<S>(this.dataL, null, this.childL, this.childM, null, null);
                     this.childL.parent = newLeft;
                     this.childM.parent = newLeft;
                     newRight = new Node<S>(middle, null, left, right, null, null);
                     left.parent = newRight;
                     right.parent = newRight;
                end
            end
        res = this.repairOrReroot(this.dataR, newLeft, newRight);
        return res;
        end
    end

    Node<S> repairOrReroot(Pair<Int, S> middle, Node<S> left, Node<S> right)
        Node<S> newTop = null;
        if(this.parent == null) then //root
            newTop = new Node<S>(middle, null, left, right, null, null);
            left.parent = newTop;
            right.parent = newTop;
        else
            newTop = this.parent.repair(left, middle, right, this);
            this.parent = null;
        end
        return newTop;
    end
    S retrieve(Int k)
       S res = null;
       if(this.dataL == null) then res = null; return res; end
       if(k == this.dataL.key) then res = this.dataL.value; return res; end
       if(k <= this.dataL.key) then res = this.childL.retrieve(k); return res; end
       if(this.dataR == null) then res = this.childM.retrieve(k); return res; end
       if(k == this.dataR.key) then res = this.dataR.value; return res; end
       if(k <= this.dataR.key) then res = this.childM.retrieve(k); return res; end
       res = this.childR.retrieve(k);
       return res;
    end
end

class Tree<P>(Node<P> root)
    Int add(Pair<Int, P> kv)
        Node<P> res = this.root.add(kv);
        if(res != null) then this.root = res; end
        return 0;
    end
    P retrieve(Int k)
       P res = this.root.retrieve(k);
       return res;
    end
end

class  Wrap<Z>(Tree<Z> ttt, Int key)
    rule Z lookup()
        Z v = this.ttt.retrieve(this.key);
        return v;
    end
end

main
    Node<String> root = new Node<String>(null, null, null, null, null, null);
    Tree<String> tree = new Tree<String>(root);
    Pair<Int, String> pair1 = new Pair<Int, String>(1,"a");
    Pair<Int, String> pair2 = new Pair<Int, String>(2,"b");
    Pair<Int, String> pair3 = new Pair<Int, String>(3,"c");
    Pair<Int, String> pair4 = new Pair<Int, String>(4,"d");
    Pair<Int, String> pair5 = new Pair<Int, String>(5,"e");
    Pair<Int, String> pair6 = new Pair<Int, String>(6,"f");
    Pair<Int, String> pair7 = new Pair<Int, String>(7,"g");
    tree.add(pair3);
    tree.add(pair2);
    tree.add(pair1);
    tree.add(pair7);
    tree.add(pair4);
    tree.add(pair5);
    tree.add(pair6);

    Wrap<String> ww = new Wrap<String>(tree, 1);
    //res = ww.lookup(); //query SELECT ?x WHERE { ?x a domain:TwoNode }
    List<String> res = access("SELECT ?obj WHERE {?sth prog:Wrap_lookup_builtin_res ?obj}");
    print(res);
    breakpoint;
    print("done");
end
