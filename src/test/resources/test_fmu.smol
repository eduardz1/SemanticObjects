class SuccessClass()
    Int start()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Cont[In Double ra, In Double rb ] fmu2 := simulate("src/test/resources/adder.fmu");
        Cont[In Double rb, Out Double rc] fmu3 := simulate("src/test/resources/adder.fmu");
        Cont[] fmu4 := simulate("src/test/resources/adder.fmu");
        Cont[In Double ra, In Double rb, Out Double rc] fmu5 := simulate("src/test/resources/adder.fmu", ra := 0.0);
        return 1;
    end

    Int assign()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Cont[In Double ra, In Double rb] fmu2 := simulate("src/test/resources/adder.fmu");
        Cont[In Double rb, Out Double rc] fmu3 := simulate("src/test/resources/adder.fmu");
        Cont[] fmu4 := simulate("src/test/resources/adder.fmu");
        Cont[In Double ra, In Double rb, Out Double rc] fmu5 := simulate("src/test/resources/adder.fmu", ra := 0.0);
        fmu2 := fmu1;
        fmu3 := fmu1;
        fmu4 := fmu1;
        fmu4 := fmu2;
        fmu4 := fmu3;
        fmu1 := fmu5;
        return 1;
    end

    Int portTest()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Double dd := fmu1.port("rc");
        fmu1.port("ra") := 2.0;
        return 1;
    end

    Int fieldfail1()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Double g := fmu1.ra;
    end
    Int fieldfail2()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        fmu1.rc := 1.0;
    end
    Int fieldfail3()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        fmu1.rc := 1;
    end
    Int fieldfail4()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        fmu1.rd := 1;
    end
    Int fieldfail5()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Double dd := fmu1.rd;
    end
    Int fieldfail6()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Double dd := fmu1.port("rd");
    end
    Int extra(String str, Double param)
        Cont[] fmu4 := simulate("src/test/resources/adder.fmu");
        fmu4.role := str;
        fmu4.pseudoOffset := param;
        String read := fmu4.role;
        Double pseudoOffset := fmu4.pseudoOffset;
        return 0;
    end
end

class FailClass()
    Int fail1()
        Cont[In Int ra, In Int rb, Out Int rc] fmu1 := simulate("src/test/resources/adder.fmu"); //wrong type
        return 1;
    end
    Int fail2()
        Cont[In Double rc, Out Double ra, Out Double rb] fmu5 := simulate("src/test/resources/adder.fmu"); //wrong order
        return 1;
    end
    Int fail3()
        Cont[In Double ra, In Double rb, Out Double rc] fmu5 := simulate("src/test/resources/adder.fmu", rc := 0.0); //inits output
        return 1;
    end
    Int fail4()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Cont[In Int ia, In Int ib, Out Int ic] fmu2 := simulate("src/test/resources/adder.fmu");
        fmu2 := fmu1;
        return 1;
    end
    Int fail5()
        Cont[In Double ra, In Double rb, Out Double rc] fmu1 := simulate("src/test/resources/adder.fmu");
        Cont[] fmu2 := simulate("src/test/resources/adder.fmu");
        fmu1 := fmu2;
        return 1;
    end
    Int fail6()
        Cont[In Int rb, Out Int rc] fmu1 := simulate("src/test/resources/adder.fmu");
        return 1;
    end
end

main
skip;
end