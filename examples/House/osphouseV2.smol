abstract class FMU_Wrapper()
  abstract Int propagate()         //pull
  abstract Int advance(Double db)
end

abstract class Area extends FMU_Wrapper()
  abstract Double getT()
  abstract Controller getCtrl()
end

class Wall extends FMU_Wrapper (
  Cont[in Double T_areaLeft, in Double T_areaRight,
  	out Double h_wall] fmuSim,
  Area areaLeft,
  Area areaRight)

  override Int propagate()
    Double t = this.areaLeft.getT();
    this.fmuSim.T_areaLeft = t;
    t = this.areaRight.getT();
    this.fmuSim.T_areaRight = t;
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    return 0;
  end

  Double getH()
    return this.fmuSim.h_wall;
  end
end

class Controller extends FMU_Wrapper (
  Cont[in Double T_roomLeft, in Double T_roomRight,
  	out Double h_roomLeft, out Double h_roomRight] fmuSim,
  Room roomLeft,
  Room roomRight)

  override Int propagate()
    this.fmuSim.T_roomLeft = this.roomLeft.fmuSim.T_room;
    this.fmuSim.T_roomLeft = this.roomRight.fmuSim.T_room;
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    return 0;
  end

end

class Outside extends Area(Double temp) // Fake FMU wrapper
  override Int propagate()
    return 0;
  end

  override Int advance(Double db)
    return 0;
  end

  override Double getT()
    return this.temp;
  end

  override Controller getCtrl()
    return null;
  end

end

class Room extends Area (
  Cont[in Double h_wallLeft, in Double h_wallRight,
    	in Double h_powerHeater, out Double T_room]  fmuSim,
  Wall wallLeft,
  Wall wallRight,
  Controller ctrl,
  Boolean isFirst,
  Room nextRoom)

  override Double getT()
    return this.fmuSim.T_room;
  end

  override Controller getCtrl()
    return this.ctrl;
  end

  override Int propagate()
    this.wallRight.propagate();
    if(this.isFirst) then
      this.ctrl.propagate();
    end
    if this.nextRoom == null then
      skip;
    else
      this.nextRoom.propagate();
    end
    Double h = this.wallLeft.getH();
    this.fmuSim.h_wallLeft = h;
    h = this.wallRight.getH();
    this.fmuSim.h_wallRight = h;
    if(this.isFirst) then
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomLeft;
    else
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomRight;
    end
    return 0;
  end

  override Int advance(Double db)
    this.wallRight.advance(db);
    if(this.isFirst) then
      this.ctrl.advance(db);
    end
    if this.nextRoom == null then
      skip;
    else
      this.nextRoom.advance(db);
    end
    this.fmuSim.tick(db);
    return 0;
  end

end

class House(Cont[out Double clock] clock, Room firstRoom, Room lastRoom)

  Int init( // built a base house with two rooms
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, //outer wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // inner wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w3, // outer wall
    Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight] ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2, //  room
    Outside osLeft, Outside osRight)
    Room roomLeft = null;// outer rooms in the FMU wrapper
    Room roomRight = null;
    Controller control = null;// Controller in the FMU wrapper
    Wall wall1 = null;//  walls in the FMU wrapper
    Wall wall2  = null;
    Wall wall3 = null;
    this.firstRoom = roomLeft; // pointers to the first and last element in the list of rooms
    this.lastRoom = roomRight;
    control = new Controller(ctrl, roomLeft, roomRight); // initilalizing controller in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);// initialising outer room in the FMU wrapper
    wall1 = new Wall(w1, osLeft, roomLeft);// initializing outer wall in the FMU wrapper
    wall2  = new Wall(w2, roomLeft, roomRight);// initializing innter wall in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);  // initialising outer room in the FMU wrapper
    wall3 = new Wall(w3, roomRight, osRight);// initializing outer wall in the FMU wrapper
    roomLeft.ctrl = control;     // connecting wrappers
    roomLeft.wallLeft = wall1;
    roomLeft.wallRight = wall2;
    roomLeft.nextRoom = roomRight;
    roomRight.ctrl = control;
    roomRight.wallLeft = wall2;
    roomRight.wallRight = wall3;
    roomRight.nextRoom = null;
    Boolean b = validate("examples/House/shape.ttl");   // asset validation
    print(b);
    return 0;
  end
  
  Int addRight(  //add two rooms to the right
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, //  wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, //  wall
    Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight] ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2) //  room
    Room roomLeft = null;
    Room roomRight = null;
    Controller control = null;// Controller in the FMU wrapper
    Wall wall1 = null;//  walls in the FMU wrapper
    Wall wall2  = null;
    // initilalizing controller in the FMU wrapper
    control = new Controller(ctrl, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);
    // initializing innter wall in the FMU wrapper
    wall1  = new Wall(w1, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall2 = new Wall(w2, roomRight, this.lastRoom.wallRight.areaRight);

    // connecting wrappers
    this.lastRoom.wallRight.areaRight = roomLeft;
    roomLeft.ctrl = control;
    roomLeft.wallLeft = this.lastRoom.wallRight;
    roomLeft.wallRight = wall1;
    roomLeft.nextRoom = roomRight;

    roomRight.ctrl = control;
    roomRight.wallLeft = wall1;
    roomRight.wallRight = wall2;
    roomRight.nextRoom = null;

    // last element in the list of rooms
    this.lastRoom = roomRight;

    // asset validation
    Boolean b = validate("examples/House/shape.ttl");
    print(b);

    return 0;
  end


  //add two rooms to the left
  Int addLeft(
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, //wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // wall
    Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight] ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2) //  room

    Room roomLeft = null;
    Room roomRight = null;
    // Controller in the FMU wrapper
    Controller control = null;
    //  walls in the FMU wrapper
    Wall wall1 = null;
    Wall wall2  = null;

    // initilalizing controller in the FMU wrapper
    control = new Controller(ctrl, roomLeft, roomRight);

    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);

    // initializing innter wall in the FMU wrapper
    wall1  = new Wall(w1, this.firstRoom.wallLeft.areaLeft, roomLeft);

    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall2 = new Wall(w2, roomLeft, roomRight);

    // connecting wrappers
    this.firstRoom.wallLeft.areaLeft = roomRight;
    roomLeft.ctrl = control;
    roomLeft.wallLeft = wall1;
    roomLeft.wallRight = wall2;
    roomLeft.nextRoom = roomRight;

    roomRight.ctrl = control;
    roomRight.wallLeft = wall2;
    roomRight.wallRight = this.firstRoom.wallLeft;
    roomRight.nextRoom = this.firstRoom;

    // first element in the list of rooms
    this.firstRoom = roomLeft;

    // asset validation
    Boolean b = validate("examples/House/shape.ttl");
    print(b);

    return 0;
  end

  //add one room to the left and one room to the right
  Int addLeftRight(
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, // wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // wall
    Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight] ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2) //  room

    Room roomLeft = null;
    Room roomRight = null;
    // Controller in the FMU wrapper
    Controller control = null;
    //  walls in the FMU wrapper
    Wall wall1 = null;
    Wall wall2  = null;

    // reconfigure controllers

    control = new Controller(ctrl, roomLeft, this.firstRoom);
    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);
    // initializing innter wall in the FMU wrapper
    wall1  = new Wall(w1, this.firstRoom.wallLeft.areaLeft, roomLeft);
    this.firstRoom.isFirst = False;
    this.firstRoom.ctrl = control;

    Room iterator = this.firstRoom;

    roomLeft.ctrl = control;
    roomLeft.wallLeft = wall1;
    roomRight.wallRight = this.firstRoom.wallLeft;
    roomRight.nextRoom = this.firstRoom;

    this.firstRoom = roomLeft;

    Boolean flip = True;
    while iterator.nextRoom != null do
      iterator = iterator.nextRoom;
      iterator.isFirst = flip;
      if flip == True then
        if iterator == this.lastRoom then
          iterator.ctrl.roomLeft = iterator;
          iterator.ctrl.roomRight= roomRight;
        else
          iterator.ctrl.roomLeft = iterator;
          iterator.ctrl.roomRight= iterator.nextRoom;
        end
      else
        iterator.ctrl = iterator.wallLeft.areaLeft.getCtrl();
      end
      if flip == True then // flip the Boolean
        flip = False;
      else
        flip = True;
      end
    end

    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall2 = new Wall(w2, roomLeft, this.lastRoom.wallRight.areaRight);

    // connecting wrappers
    roomRight.ctrl = this.lastRoom.ctrl;
    roomRight.wallLeft = this.lastRoom.wallRight;
    roomRight.wallRight = wall2;
    roomRight.nextRoom = null;

    // last element in the list of rooms
    this.lastRoom = roomRight;

    // asset validation
    Boolean b = validate("examples/House/shape.ttl");
    print(b);

    return 0;
  end

 Int propagate()
    this.firstRoom.wallLeft.propagate();
    this.firstRoom.propagate();
    return 0;
  end

 Int advance(Double db)
    this.firstRoom.wallLeft.advance(db);
    this.firstRoom.advance(db);
    this.clock.tick(db);
    return 0;
  end
end


main
  Double step = 0.01;
  Int at = 0;
  Int limit = 30000;

  Cont[out Double clock] cl = simulate("examples/DummyFMUs/Clock.fmu", Reset = 100);

  House house = new House(cl, null, null);

  Outside outsideLeft = new Outside(5.3);
  Outside outsideRight = new Outside(4.9);

//House base case: 2 rooms
  // associating an outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w1 = simulate("examples/DummyFMUs/OuterWall.fmu");

  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w2 = simulate("examples/DummyFMUs/InnerWall.fmu");
  // associating an outer wall outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w3 = simulate("examples/DummyFMUs/OuterWall.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl1 = simulate("examples/DummyFMUs/Controller.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double T_room]
  r1 = simulate("examples/DummyFMUs/Room.fmu");
//  r1.role = "room 1";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double T_room]
  r2 = simulate("examples/DummyFMUs/Room.fmu");
//  r2.role = "room 2";

  Int h = 0;
  h = house.init(w1, w2, w3, ctrl1, r1, r2, outsideLeft, outsideRight);

  Double p = 0;
  while at < limit do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    p = house.lastRoom.getT();
    if(at % 100 == 0)  then print(p); end
  end

//Reconfigure house: add two more rooms to the right of the house
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w4 = simulate("examples/DummyFMUs/InnerWall.fmu");
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w5 = simulate("examples/DummyFMUs/InnerWall.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl2 = simulate("examples/DummyFMUs/Controller.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r3 = simulate("examples/DummyFMUs/Room.fmu");
  //r3.role = "room 3";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r4 = simulate("examples/DummyFMUs/Room.fmu");
//  r4.role = "room 4";

  h = house.addRight(w4, w5, ctrl2, r3, r4);

  while at < limit*2 do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    p = house.lastRoom.getT();
    if(at % 100 == 0)  then print(p); end
  end

//Reconfigure house: add two more rooms to the left of the house
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w6 = simulate("examples/DummyFMUs/InnerWall.fmu");
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w7 = simulate("examples/DummyFMUs/InnerWall.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl3 = simulate("examples/DummyFMUs/Controller.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r5 = simulate("examples/DummyFMUs/Room.fmu");
//  r5.role = "room 5";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r6 = simulate("examples/DummyFMUs/Room.fmu");
//  r6.role = "room 6";

  h = house.addLeft(w6, w7, ctrl3, r5, r6);

  while at < limit*3 do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    p = house.lastRoom.getT();
    if(at % 100 == 0) then print(p); end
  end

  //Reconfigure house: add one room to the left and one room to the right
    // associating an innter wall FMU
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
    w8 = simulate("examples/DummyFMUs/InnerWall.fmu");
    // associating an innter wall FMU
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
    w9 = simulate("examples/DummyFMUs/InnerWall.fmu");
    // associating a controller FMUs
    Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight]
    ctrl4 = simulate("examples/DummyFMUs/Controller.fmu");
    // associating a room FMU
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room]
    r7 = simulate("examples/DummyFMUs/Room.fmu");
  //  r7.role = "room 7";
    // associating a room FMU
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room]
    r8 = simulate("examples/DummyFMUs/Room.fmu");
//    r8.role = "room 8";

    h = house.addLeftRight(w8, w9, ctrl4, r7, r8);

    while at < limit*4 do
      h = house.propagate();
      h = house.advance(step);
      at = at + 1;
      p = house.lastRoom.getT();
      if(at % 100 == 0) then print(p); end
    end


end
