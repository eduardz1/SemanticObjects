

abstract class FMU_Wrapper
  abstract Int propagate()         //pull
  abstract Int advance(Double db)
end

class Wall extends FMU_Wrapper (
  Cont[in Double T_areaLeft, in Double T_areaRight,
  	out Double h_wall] fmuSim,
  Area areaLeft,
  Area areaRight)

  override Int propagate()
    if this.areaLeft.outside then
        this.fmuSim.T_areaLeft = this.left.temp;
    else
        this.fmuSim.T_areaLeft   = this.left.fmuSim.T_room;
    end

    if this.areaRight.outside then
        this.fmuSim.T_areaRight = this.right.temp;
    else
        this.fmuSim.T_areaRight   = this.right.fmuSim.T_room;
    end
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    return 0;
  end

  override Double getH()
    return this.fmuSim.h_wall;
  end

end

class Controller extends FMU_Wrapper (
  Cont[in Double T_roomLeft, in Double T_roomRight,
  	in Double T_clock, out Double h_roomLeft,
  	out Double h_roomRight] fmuSim,
  //Cont[out Double Clock] clock,
  Room rLeft,
  Room rRight)

  override Int propagate()
    this.fmuSim.T_roomLeft = this.r1.fmuSim.T_room;
    this.fmuSim.T_roomLeft = this.r2.fmuSim.T_room;
    //this.fmuSim.T_clock = this.clock.Clock;
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    //this.clock.tick(db);
    return 0;
  end
end

abstract class Area extends FMU_Wrapper end

class Outside (Double temp) extends Area // Fake FMU wrapper
  Boolean outside = True;

  override Int propagate()
    return 0
  end

  override Int advance(Double db)
    return 0
  end
end

class Room extends Area (
  Cont[in Double h_wallLeft, in Double h_wallRight,
    	in Double h_powerHeater, out Double T_room]  fmuSim,
  Wall wallLeft,
  Wall wallRight,
  Controller ctrl,
  Boolean isFirst,
  Room next)

  Boolean outside = False;

  override Int propagate()
    wallRigh.propagate();
    if(this.isFirst) then
      ctrl.propagate();
    end
    if this.next != null then
      next.propagate();
    end

    this.fmuSim.h_wallLeft = this.left.getH();
    this.fmuSim.h_wallRight = this.right.getH();

    if(this.isFirst) then
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomLeft;
    else
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomRight;
    end
    return 0;
  end

  override Int advance(Double db)
    righ.advance(db);
    if(this.isFirst) then
      ctrl.advance(db);
    end
    if next != null then
      next.advance(db);
    end

    this.fmuSim.tick(db);
    return 0;
  end

end


class House(Cont[out Double Clock] clock)

  Room first = null;
  Room last= null;

  // built a base house with two rooms
  Int init(
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, //outer wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // inner wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w3, // outer wall
    Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
    out Double h_roomLeft, out Double h_roomRight]> ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2, //  room
    Outside osLeft, Outside osRight)

    // outer rooms in the FMU wrapper
    Room roomLeft = null;
    Room roomRight = null;
    // Controller in the FMU wrapper
    Controller control = null;
    //  walls in the FMU wrapper
    Wall wall1 = null;
    Wall wall2  = null;
    Wall wall3 = null;
    // pointers to the first and last element in the list of rooms
    first = roomLeft;
    last = roomRight;

    // initilalizing controller in the FMU wrapper
    Controller control = new Controller(ctrl, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);
    // initializing outer wall in the FMU wrapper
    wall1 = new Wall(w1, roomLeft, osLeft);
    // initializing innter wall in the FMU wrapper
    wall2  = new Wall(w2, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall3 = new Wall(w3, roomRight, osRight);
    // initialising outer room in the FMU wrapper

    // connecting wrappers
    roomLeft.ctrl = control;
    roomLeft.wallLeft = wall1;
    roomLeft.wallRight = wall2;
    roomLeft.next = roomRight;

    roomRight.ctrl = control;
    roomRight.wallLeft = wall2;
    roomRight.wallRight = wall3;
    roomRight.next = null;

    // asset validation
    Boolean b = validate("examples\House\shape.ttl");
    print(b);

    return 0
  end

  //add two rooms to the right
  Int addRight(
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, // inner wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // inner wall
    Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
    out Double h_roomLeft, out Double h_roomRight]> ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2) //  room

    Room roomLeft = null;
    Room roomRight = null;
    // Controller in the FMU wrapper
    Controller control = null;
    //  walls in the FMU wrapper
    Wall wall1 = null;
    Wall wall2  = null;

    // initilalizing controller in the FMU wrapper
    Controller control = new Controller(ctrl, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);
    // initializing innter wall in the FMU wrapper
    wall1  = new Wall(w1, roomLeft, roomRight);
    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall2 = new Wall(w2, roomRight, last.wallRight.areaRight);

    // connecting wrappers
    last.wallRight.areaRight = roomLeft;
    roomLeft.ctrl = control;
    roomLeft.wallLeft = last.WallRight;
    roomLeft.right = wall1;
    roomLeft.next = roomRight;

    roomRight.ctrl = control;
    roomRight.left = wall1;
    roomRight.right = wall2;
    roomRight.next = null;

    // last element in the list of rooms
    last = roomRight;

    // asset validation
    Boolean b = validate("examples\House\shape.ttl");
    print(b);

    return 0
  end


  //add two rooms to the left
  Int addleft(
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w1, // inner wall
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w2, // inner wall
    Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
    out Double h_roomLeft, out Double h_roomRight]> ctrl, // controller
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r1,  //  room
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r2) //  room

    Room roomLeft = null;
    Room roomRight = null;
    // Controller in the FMU wrapper
    Controller control = null;
    //  walls in the FMU wrapper
    Wall wall1 = null;
    Wall wall2  = null;

    // initilalizing controller in the FMU wrapper
    Controller control = new Controller(ctrl, roomLeft, roomRight);

    // initialising outer room in the FMU wrapper
    roomLeft = new Room(r1, null, null, null, True, null);

    // initializing innter wall in the FMU wrapper
    wall1  = new Wall(w1, first.wallLeft.arealeft, roomleft);

    // initialising outer room in the FMU wrapper
    roomRight = new Room(r2, null, null, null, False, null);
    // initializing outer wall in the FMU wrapper
    wall2 = new Wall(w2, roomLeft, roomRight);

    // connecting wrappers
    first.wallLeft.arealeft = roomRight;
    roomLeft.ctrl = control;
    roomLeft.wallLeft = wall1;
    roomLeft.right = wall2;
    roomLeft.next = roomRight;

    roomRight.ctrl = control;
    roomRight.left = wall2;
    roomRight.right = first.wallLeft;
    roomRight.next = first;

    // last element in the list of rooms
    first = roomLeft;

    // asset validation
    Boolean b = validate("examples\House\shape.ttl");
    print(b);

    return 0
  end

 Int propagate()
    first.left.propagate();
    first.propagate();
    return 0;
  end

 Int advance(Double db)
    first.left.advance(db);
    first.advance(db);
    this.clock.tick(db);
    return 0;
  end
end


main
  Double step = 0.01;
  Int at = 0;
  Int limit = 30000;

  Cont[out Double Clock]
  cl = simulate("examples\House\fmus\Clock.fmu", Reset = 100);

  House house = new House(cl);

  Outside outsideLeft = new Outside(5.3);
  Outside outsideRight = new Outside(4.9);

//House base case: 2 rooms
  // associating an outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w1 = simulate("examples\House\fmus\Wall1.fmu");
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w2 = simulate("examples\House\fmus\Wall2.fmu");
  // associating an outer wall outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w3 = simulate("examples\House\fmus\Wall3.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl1 = simulate("examples\House\fmus\TempController1.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r1 = simulate("examples\House\fmus\Room1.fmu");
  r1.role = "room 1";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r2 = simulate("examples\House\fmus\Room2.fmu");
  r2.role = "room 2";

  Int h = house.init(w1, w2, w3, ctrl1, r1, r2, outsideLeft, outsideRight);

  while at < limit do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    if(at % 100 == 0) then print(house.last.fmuSim.T_room); end
  end

//Reconfigure house: add two more rooms to the right of the house
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w4 = simulate("examples\House\fmus\Wall4.fmu");
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w5 = simulate("examples\House\fmus\Wall5.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl2 = simulate("examples\House\fmus\TempController2.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r3 = simulate("examples\House\fmus\Room3.fmu");
  r3.role = "room 3";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r4 = simulate("examples\House\fmus\Room4.fmu");
  r4.role = "room 4";

  h = house.addRight(w4, w5, ctrl2, r3, r4);

  while at < limit*2 do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    if(at % 100 == 0) then print(house.last.fmuSim.T_room); end
  end

//Reconfigure house: add two more rooms to the left of the house
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w6 = simulate("examples\House\fmus\Wall6.fmu");
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w7 = simulate("examples\House\fmus\Wall7.fmu");
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl3 = simulate("examples\House\fmus\TempController3.fmu");
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r5 = simulate("examples\House\fmus\Room5.fmu");
  r5.role = "room 5";
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r6 = simulate("examples\House\fmus\Room6.fmu");
  r6.role = "room 6";

  h = house.addLeft(w6, w7, ctrl3, r5, r6);

  while at < limit*3 do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    if(at % 100 == 0) then print(house.last.fmuSim.T_room); end
  end
end
