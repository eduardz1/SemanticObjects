abstract class FMU_Wrapper()
  abstract Unit propagate()         //pull
  abstract Unit advance(Double db)
end

abstract class Area extends FMU_Wrapper()
  abstract Double getT()
  abstract Controller getCtrl()
end

class Wall extends FMU_Wrapper (
  Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall] fmuSim,
  Area areaLeft, Area areaRight)

  override Unit propagate()
    this.fmuSim.t_areaLeft = this.areaLeft.getT();
    this.fmuSim.t_areaRight = this.areaRight.getT();
  end

  override Unit advance(Double db) this.fmuSim.tick(db); end

  Double getH() return this.fmuSim.h_wall; end
end

class Controller extends FMU_Wrapper (
  Cont[in Double t_roomLeft, in Double t_roomRight, out Double h_roomLeft, out Double h_roomRight] fmuSim,
  Room roomLeft, Room roomRight)

  override Unit propagate()
    this.fmuSim.t_roomLeft = this.roomLeft.fmuSim.t_room;
    this.fmuSim.t_roomLeft = this.roomRight.fmuSim.t_room;
  end

  override Unit advance(Double db) this.fmuSim.tick(db); end
end

class Outside extends Area(Double temp) // Fake FMU wrapper
  override Unit propagate() skip; end
  override Unit advance(Double db) skip; end
  override Double getT() return this.temp; end
  override Controller getCtrl() return null; end
end

class Room extends Area (
  Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double t_room]  fmuSim,
  Wall wallLeft, Wall wallRight,
  Controller ctrl, Boolean isFirst, Room nextRoom)

    Unit ping()
        print(this);
        if this.nextRoom != null then this.nextRoom.ping(); end
    end

  Unit rebuildCtrl()
      Cont[in Double t_roomLeft, in Double t_roomRight, out Double h_roomLeft, out Double h_roomRight]
        ctrl = simulate("examples/DummyFMUs/Controller.fmu");
      Controller control = new Controller(ctrl, this, this.nextRoom);
      print("built!");
      if this.ctrl != null then
        destroy(this.ctrl);
      end
      this.ctrl = control;
      this.nextRoom.ctrl = control; //XX
      if this.nextRoom.nextRoom != null then
          this.nextRoom.nextRoom.rebuildCtrl();
      end
  end

  override Double getT() return this.fmuSim.t_room; end

  override Controller getCtrl() return this.ctrl; end

  override Unit propagate()
    this.wallRight.propagate();
    if(this.isFirst) then this.ctrl.propagate(); end
    if this.nextRoom != null then this.nextRoom.propagate(); end
    this.fmuSim.h_wallLeft = this.wallLeft.getH();
    this.fmuSim.h_wallRight = this.wallRight.getH();
    if(this.isFirst) then
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomLeft;
    else
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomRight;
    end
  end

  override Unit advance(Double db)
    this.wallRight.advance(db);
    if(this.isFirst) then this.ctrl.advance(db); end
    if this.nextRoom != null then this.nextRoom.advance(db); end
    this.fmuSim.tick(db);
  end

end

class House(Cont[out Double clock] clock, Room firstRoom, Room lastRoom)

  Unit layout()
    print(" # firstRoom: ");
    print(this.firstRoom);
    print(" # lastRoom: ");
    print(this.lastRoom);
      print("  # rows start ");
    this.firstRoom.ping();
      print("  # rows end ");
  end

  Unit init(Outside osLeft, Outside osRight)
  // Walls
  Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
    w_left = simulate("examples/DummyFMUs/OuterWall.fmu");

  Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
    w_middle = simulate("examples/DummyFMUs/InnerWall.fmu");

  Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
    w_right = simulate("examples/DummyFMUs/OuterWall.fmu");

  // rooms
  Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double t_room]
    r_left = simulate("examples/DummyFMUs/Room.fmu");

  Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double t_room]
    r_right = simulate("examples/DummyFMUs/Room.fmu");

  // controller
  Cont[in Double t_roomLeft, in Double t_roomRight, out Double h_roomLeft, out Double h_roomRight]
    ctrl = simulate("examples/DummyFMUs/Controller.fmu");

    Room roomLeft = new Room(r_left, null, null, null, True, null);
    Room roomRight = new Room(r_right, null, null, null, False, null);
    Controller control = new Controller(ctrl, roomLeft, roomRight);
    Wall wall1 = new Wall(w_left, osLeft, roomLeft);
    Wall wall2  = new Wall(w_middle, roomLeft, roomRight);
    Wall wall3 = new Wall(w_right, roomRight, osRight);

    //connect wrappers
    roomLeft.ctrl = control;
    roomLeft.wallLeft = wall1;
    roomLeft.wallRight = wall2;
    roomLeft.nextRoom = roomRight;
    roomRight.ctrl = control;
    roomRight.wallLeft = wall2;
    roomRight.wallRight = wall3;
    roomRight.nextRoom = null;

    this.firstRoom = roomLeft; // pointers to the first and last element in the list of rooms
    this.lastRoom = roomRight;

    Boolean b = validate("examples/House/shape.ttl");   // asset validation
    print(b);
  end


  /*****************************
  Adds one room at the beginning, i.e., to the left
  *****************************/
  Unit addOneLeft()
    //create new wall
    Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
      new_outer = simulate("examples/DummyFMUs/OuterWall.fmu");

    Wall new_wall  = new Wall(new_outer, null, null);

    //create new room
    Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double t_room]
      new_room_fmu = simulate("examples/DummyFMUs/Room.fmu");

    Room new_room = new Room(new_room_fmu, null, null, null, False, null);

    //link
    new_wall.areaLeft = this.firstRoom.wallLeft.areaLeft;
    new_wall.areaRight = new_room;
    new_room.wallLeft = new_wall;
    new_room.wallRight = this.firstRoom.wallLeft;
    new_room.nextRoom = this.firstRoom;
    this.firstRoom.wallLeft.areaLeft = new_room;
    this.firstRoom = new_room;

    //repair old outer wall
    Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
      new_inner = simulate("examples/DummyFMUs/InnerWall.fmu");
    new_room.wallRight.fmuSim = new_inner;
  end

    /*****************************
    Adds one room at the end, i.e., to the right
    *****************************/
    Unit addOneRight()
      //create new wall
      Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
        new_outer = simulate("examples/DummyFMUs/OuterWall.fmu");

      Wall new_wall  = new Wall(new_outer, null, null);

      //create new room
      Cont[in Double h_wallLeft, in Double h_wallRight, in Double h_powerHeater, out Double t_room]
        new_room_fmu = simulate("examples/DummyFMUs/Room.fmu");

      Room new_room = new Room(new_room_fmu, null, null, null, False, null);

      //link
      new_wall.areaLeft = new_room; //this.firstRoom.wallLeft.areaLeft;
      new_wall.areaRight = this.lastRoom.wallRight.areaRight;//new_room;
      new_room.wallLeft = this.lastRoom.wallRight; //new_wall;
      new_room.wallRight = new_wall; //this.firstRoom.wallLeft;
      this.lastRoom.nextRoom = new_room;
      this.lastRoom.wallRight.areaRight = new_room;
      this.lastRoom = new_room;

      //repair old outer wall
      Cont[in Double t_areaLeft, in Double t_areaRight, out Double h_wall]
        new_inner = simulate("examples/DummyFMUs/InnerWall.fmu");
      new_room.wallLeft.fmuSim = new_inner;
    end


  Unit addTwoLeft()
    this.addOneLeft();
    this.addOneLeft();

    //repair controller structure
    Cont[in Double t_roomLeft, in Double t_roomRight, out Double h_roomLeft, out Double h_roomRight]
      ctrl = simulate("examples/DummyFMUs/Controller.fmu");

    Controller control = new Controller(ctrl, this.firstRoom, this.firstRoom.nextRoom);
    this.firstRoom.ctrl = control;
    this.firstRoom.nextRoom.ctrl = control;

    Boolean b = validate("examples/House/shape.ttl");
    print(b);
  end

  Unit addTwoRight()
    this.addOneRight();
    Room nextToLast = this.lastRoom;
    this.addOneRight();

    //repair controller structure
    Cont[in Double t_roomLeft, in Double t_roomRight, out Double h_roomLeft, out Double h_roomRight]
      ctrl = simulate("examples/DummyFMUs/Controller.fmu");

    Controller control = new Controller(ctrl, this.lastRoom, nextToLast);
    this.lastRoom.ctrl = control;
    nextToLast.ctrl = control;

    Boolean b = validate("examples/House/shape.ttl");
    print(b);
  end

  Unit addLeftRight()
    Room nextToLast = this.lastRoom;
    this.addOneLeft();
    this.addOneRight();

    //repair controller structure
    this.firstRoom.rebuildCtrl();

    Boolean b = validate("examples/House/shape.ttl");
    print(b);

  end


 Unit propagate()
    //breakpoint;
    if this.firstRoom != null then
        this.firstRoom.wallLeft.propagate();
        this.firstRoom.propagate();
    end
  end

 Unit advance(Double db)
    if this.firstRoom != null then
        this.firstRoom.wallLeft.advance(db);
        this.firstRoom.advance(db);
        this.clock.tick(db);
    end
  end

  Unit simulation(Double size, Int steps)
    Double p = 0.0;
    Int at = 0;
    while at < steps do
      this.propagate();
      this.advance(size);
      at = at + 1;
      if this.lastRoom != null then
          p = this.lastRoom.getT();
          print(p);
      end
    end
  end
end







main
  /*****************************
  General options and structures
  *****************************/
  Double step = 0.01;
  Int limit = 5;
  Cont[out Double clock] cl = simulate("examples/DummyFMUs/Clock.fmu", Reset = 100);

  // General structures
  House house = new House(cl, null, null);
  Outside outside_left = new Outside(5.3);
  Outside outside_right = new Outside(4.9);

  /*****************************
  Build initial house and simulate for a while (first time)
  *****************************/
  house.init(outside_left, outside_right);
  print(" ### House built!"); house.layout();
  house.simulation(step, limit);
  print(" ### Simulation phase 1 finished");


  /*****************************
  Reconfigure (add two rooms to the right) and simulate
  *****************************/
  house.addTwoRight();
  print(" ### House restructured addTwoRight!"); house.layout();
  house.simulation(step, limit);
  print(" ### Simulation phase 2 finished");


  /*****************************
  Reconfigure (add two rooms to the left) and simulate
  *****************************/
  house.addTwoLeft();
  print(" ### House restructured addTwoLeft!"); house.layout();
  house.simulation(step, limit);
  print(" ### Simulation phase 3 finished");


  /*****************************
  Reconfigure (add one room to the left and one to the right) and simulate
  *****************************/
  house.addLeftRight();
  print(" ### House restructured addLeftRight!"); house.layout();
  house.simulation(step, limit);
  print(" ### Simulation phase 4 finished");

end
