

abstract class FMU_Wrapper()
  abstract Int propagate()         //pull
  abstract Int advance(Double db)
end

class Wall extends FMU_Wrapper (
  Cont[in Double T_areaLeft, in Double T_areaRight,
  	out Double h_wall] fmuSim,
  Area areaLeft,
  Area areaRight)

  override Int propagate()
    this.fmuSim.T_areaLeft = this.areaLeft.getT();
    this.fmuSim.T_areaRight = this.areaRight.getT();
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    return 0;
  end

  override Double getH()
    return this.fmuSim.h_wall;
  end
end

class Controller extends FMU_Wrapper (
  Cont[in Double T_roomLeft, in Double T_roomRight,
  	in Double T_clock, out Double h_roomLeft,
  	out Double h_roomRight] fmuSim,
  Room roomLeft,
  Room roomRight)

  override Int propagate()
    this.fmuSim.T_roomLeft = this.roomLeft.fmuSim.T_room;
    this.fmuSim.T_roomLeft = this.roomRight.fmuSim.T_room;
    return 0;
  end

  override Int advance(Double db)
    this.fmuSim.tick(db);
    return 0;
  end
end

abstract class Area extends FMU_Wrapper()
  abstract Double getT()
end

class Outside  extends Area (Double temp) // Fake FMU wrapper

  override Double getT()
    return temp;
  end

  override Int propagate()
    return 0;
  end

  override Int advance(Double db)
    return 0;
  end
end

class Room extends Area (
  Cont[in Double h_wallLeft, in Double h_wallRight,
    	in Double h_powerHeater, out Double T_room]  fmuSim,
  Wall wallLeft,
  Wall wallRight,
  Controller ctrl,
  Boolean isFirst,
  Room nextRoom)

  override Double getT()
    return T_room;
  end

  override Int propagate()
    wallRight.propagate();
    if(this.isFirst) then
      ctrl.propagate();
    end
    if this.nextRoom != null then
      nextRoom.propagate();
    end

    this.fmuSim.h_wallLeft = this.wallLeft.getH();
    this.fmuSim.h_wallRight = this.wallRight.getH();

    if(this.isFirst) then
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomLeft;
    else
      this.fmuSim.h_powerHeater = this.ctrl.fmuSim.h_roomRight;
    end
    return 0;
  end

  override Int advance(Double db)
    wallRight.advance(db);
    if(this.isFirst) then
      ctrl.advance(db);
    end
    if nextRoom != null then
      nextRoom.advance(db);
    end

    this.fmuSim.tick(db);
    return 0;
  end

end


class House(Cont[out Double clock] clock,
  Room firstRoom,
  Room lastRoom,
  Room roomLeft,
  Room roomRight,
  Controller control,
  Wall wall1,
  Wall wall2,
  Wall wall3)



  Int addWall(Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall] w)
    if wall1 == null then
      this.wall1 = new Wall(w, null, null);
    else
      if wall2 == null then
        this.wall2 = new Wall(w, null, null);
      else
        this.wall3 = new Wall(w, null, null);
      end
    end
    return 0;
  end

  Int addController(Cont[in Double T_roomLeft, in Double T_roomRight,
    out Double h_roomLeft, out Double h_roomRight] ctrl)

    this.control = new Controller(ctrl, null, null);
    return 0;
  end

  Int addRoom (Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room] r)

    if roomLeft == null then
      this.roomLeft = new Room(r, null, null, null, True, null);
    else
      this.roomRight = new Room(r, null, null, null, False, null);
    end
    return 0;
  end

  Boolean checkComponents(Int ch)
    Boolean  a = False;
    if ch == 1 then // check for built
      a = this.wall1 != null & this.wall2 != null & this.wall3 != null &
          this.control != null & this.roomLeft != null & this.roomRight != null;
    else // check for rebuilt
      a = this.wall1 != null & this.wall2 != null &
          this.control != null & this.roomLeft != null & this.roomRight != null &
          this.firstRoom != null & this.lastRoom != null;
    end

    return a;
  end

  Boolean builtHouse(Outside osLeft, Outside osRight)
    Boolean b = this.checkComponents(1);
    if b then
      this.firstRoom = this.roomLeft;
      this.lastRoom = this.roomRight;

      this.control.roomLeft = this.roomLeft;
      this.control.roomRight = this.roomRight;
      this.wall1.areaLeft = osLeft;
      this.wall1.areaRight = this.roomLeft;
      this.wall2.areaLeft = this.roomLeft;
      this.wall2.areaRight = this.roomRight;
      this.wall3.arealeft = this.roomRight;
      this.wall3.areaRight = osRight;

      this.roomLeft.ctrl = this.control;
      this.roomLeft.wallLeft = this.wall1;
      this.roomLeft.wallRight = this.wall2;
      this.roomLeft.nextRoom = this.roomRight;

      this.roomRight.ctrl = this.control;
      this.roomRight.wallLeft = this.wall2;
      this.roomRight.wallRight = this.wall3;
      this.roomRight.nextRoom = null;

      // asset validation
      b = validate("examples/House/shape.ttl");
      print(b);

      if b then
        this.roomLeft = null;
        this.roomRight = null;
        this.control = null;
        this.wall1 = null;
        this.wall2  = null;
        this.wall3 = null;
        print("SUCCESS in creating a house!");
      end
    else
      print("ERROR while creating the house");
    end
    return b;
  end

  Boolean addRoomsRight() // add two rooms to the right
    Boolean b = this.checkComponents(2);
    if b then
      this.control.roomLeft = this.roomLeft;
      this.control.roomRight = this.roomRight;
      this.wall1.areaLeft = this.roomLeft;
      this.wall1.areaRight = this.roomRight;

      this.wall2.areaLeft = this.roomRight;
      this.wall2.areaRight = this.lastRoom.wallRight.areaRight;

      this.lastRoom.wallRight.areaRight = this.roomLeft;

      this.roomLeft.ctrl = this.control;
      this.roomLeft.wallLeft = this.lastRoom.wallRight;
      this.roomLeft.wallRight = this.wall1;
      this.roomLeft.nextRoom = this.roomRight;

      this.roomRight.ctrl = this.control;
      this.roomRight.wallLeft = this.wall1;
      this.roomRight.wallRight = this.wall2;
      this.roomRight.nextRoom = null;

      // last element in the list of rooms
      this.lastRoom = this.roomRight;

      // asset validation
      Boolean b = validate("examples/House/shape.ttl");
      print(b);

      if b then
        this.roomLeft = null;
        this.roomRight = null;
        this.control = null;
        this.wall1 = null;
        this.wall2  = null;
        this.wall3 = null;
        print("SUCCESS in rebuilding!");
      end
    else
      print("ERROR while rebuilding");
    end
    return b;
  end

 Int propagate()
    firstRoom.wallLeft.propagate();
    firstRoom.propagate();
    return 0;
  end

 Int advance(Double db)
    firstRoom.wallLeft.advance(db);
    firstRoom.advance(db);
    this.clock.tick(db);
    return 0;
  end
end


main
  Double step = 0.01;
  Int at = 0;
  Int limit = 30000;

  Cont[out Double clock]
  cl = simulate("examples/DummyFMUs/Clock.fmu", Reset = 100);

  House house = new House(cl, null, null, null, null, null, null, null, null);
  Int h = 0;
  Boolean ok = False;

  Outside outsideLeft = new Outside(5.3);
  Outside outsideRight = new Outside(4.9);

//House base case: 2 rooms
  // associating an outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w1 = simulate("examples/DummyFMUs/Wall.fmu");
  h = house.addWall(w1);
  ok = house.builtHouse(outsideLeft, outsideRight);
  // associating an innter wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w2 = simulate("examples/DummyFMUs/Wall.fmu");
  h = house.addWall(w2);
  ok = house.builtHouse(outsideLeft, outsideRight);
  // associating an outer wall outer wall FMU
  Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
  w3 = simulate("examples/DummyFMUs/Wall.fmu");
  h = house.addWall(w3);
  ok = house.builtHouse(outsideLeft, outsideRight);
  // associating a controller FMUs
  Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
  out Double h_roomLeft, out Double h_roomRight]
  ctrl1 = simulate("examples/DummyFMUs/TempController.fmu");
  h = house.addController(ctrl1);
  ok = house.builtHouse(outsideLeft, outsideRight);
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r1 = simulate("examples/DummyFMUs/Room.fmu");
  r1.role = "room 1";
  h = house.addRoom(r1);
  ok = house.builtHouse(outsideLeft, outsideRight);
  // associating a room FMU
  Cont[in Double h_wallLeft, in Double h_wallRight,
  in Double h_powerHeater, out Double T_room]
  r2 = simulate("examples/DummyFMUs/Room.fmu");
  r2.role = "room 2";
  h = house.addRoom(r2);
  ok = house.builtHouse(outsideLeft, outsideRight);
  Double p = 0;
  if ok then
    while at < limit do
      h = house.propagate();
      h = house.advance(step);
      at = at + 1;
      p = house.lastRoom.getT();
      if(at % 100 == 0)  then print(p); end
    end
  end

  if ok then // reconfigure
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
    w4 = simulate("examples/DummyFMUs/Wall.fmu");
    h = house.addWall(w4);
    ok = house.addRoomsRight();
    // associating an innter wall FMU
    Cont[in Double T_areaLeft, in Double T_areaRight, out Double h_wall]
    w5 = simulate("examples/DummyFMUs/Wall.fmu");
    h = house.addWall(w5);
    ok = house.addRoomsRight();
    // associating a controller FMUs
    Cont[in Double T_roomLeft, in Double T_roomRight, //in Double T_clock,
    out Double h_roomLeft, out Double h_roomRight]
    ctrl2 = simulate("examples/DummyFMUs/TempController.fmu");
    h = house.addController(ctrl2);
    ok = house.addRoomsRight();
    // associating a room FMU
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room]
    r3 = simulate("examples/DummyFMUs/Room.fmu");
    r3.role = "room 3";
    h = house.addRoom(r3);
    ok = house.addRoomsRight();
    // associating a room FMU
    Cont[in Double h_wallLeft, in Double h_wallRight,
    in Double h_powerHeater, out Double T_room]
    r4 = simulate("examples/DummyFMUs/Room.fmu");
    r4.role = "room 4";
    h = house.addRoom(r4);
    ok = house.addRoomsRight();
  end

  while at < limit*2 do
    h = house.propagate();
    h = house.advance(step);
    at = at + 1;
    p = house.lastRoom.getT();
    if(at % 100 == 0)  then print(p); end
  end

end
